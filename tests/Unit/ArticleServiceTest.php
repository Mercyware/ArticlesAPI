<?php

namespace Tests\Unit;

use App\Interfaces\IArticleRepository;
use App\Models\Article;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Request;
use Tests\TestCase;


class ArticleServiceTest extends TestCase
{
    protected $article_repository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->article_repository = $this->createMock(IArticleRepository::class);
    }


    public function test_that_getArticles_calls_getBanks_of_ArticleRepository_Successfully()
    {

        //Act
        $this->article_repository->method('getArticles')->willReturn(new Collection());

        //Asset
        $this->assertEquals(new Collection(), $this->article_repository->getArticles());
        $this->assertInstanceOf(Collection::class, $this->article_repository->getArticles());
    }


    public function test_that_getAnArticle_calls_getAnArticle_of_ArticleRepository_Successfully()
    {

        //Act
        $this->article_repository->method('getAnArticleByArticleID')->willReturn(new Article());

        //Asset
        $this->assertEquals(new Article(), $this->article_repository->getAnArticleByArticleID(1));
        $this->assertInstanceOf(Article::class, $this->article_repository->getAnArticleByArticleID(1));
    }

    public function test_that_createArticle_calls_createArticle_suucessfully()
    {
//setup
        $article = new Request([
            'title' => 'Test Title',
            'article' => 'Teat Article',
            'user_id' => 1

        ]);


        //act
        $this->article_repository->method('createArticle')->willReturn(new Article());


        //Asset
        $this->assertEquals(new Article(), $this->article_repository->createArticle($article));
    }
}
